// Souffle - A Datalog Compiler
// Copyright (c) 2016, The Souffle Developers. All rights reserved
// Licensed under the Universal Permissive License v 1.0 as shown at:
// - https://opensource.org/licenses/UPL
// - <souffle root>/licenses/SOUFFLE-UPL.txt

// type/relation
.symbol_type typerel
.decl typerel(x : number)
.output typerel()
typerel(1).

// type/component
.number_type typecomp
.comp typecomp { }

// type/instance
.type typeinst
.init typeinst = typecomp

// relation/component
.decl relcomp(x:number)
relcomp(1).
.comp relcomp { }

// relation/instance
.decl relinst(x:number)
relinst(2).
.init relinst = typecomp

// component/instance
.comp compinst { }
.init compinst = compinst

// component/instance redux
.comp compinst2 { }
.comp compinst3 { }
.init compinst2 = compinst3


// Nested names
.comp nested {
    .number_type nesteditem
    .decl nesteditem(x:nesteditem)
    nesteditem(20).
}

.init nestedInst = nested
typerel(X) :- nestedInst.nesteditem(X).

.decl nesteditem(x:number)
.output nesteditem()
nesteditem(2).


// Inherited names -- alpha should collide here.
.comp Base {
    .decl alpha(x:number)
    alpha(8).
}

.comp Child : Base {
    .type alpha
}

.init myChild = Child


